use std::str::FromStr;

use tokens;
use super::tree;
use self::tree::{
    TopDeclr,
    Expression,
    ElmImport,
    ExportEntry,
    ExportList,
    ModuleDeclr,
    OperPriority,
    LetDeclaration,
    Pattern,
    Type,
    TypeAlias,
    TypeDeclr,
    Associativity
};

grammar;

pub ModuleDeclr: ModuleDeclr = {
    NameTok "module" <name:NameTok>
    "where" "{" NameTok "=" NameTok ("," NameTok "=" NameTok)* "}"
    "exposing" <exports:ExportList> =>
        ModuleDeclr { <> },

    "port" "module" <name:NameTok> "exposing" <exports:ExportList> =>
        ModuleDeclr { <> },

    "module" <name:NameTok> "exposing" <exports:ExportList> =>
        ModuleDeclr { <> },
};

ExportList: ExportList = {
    "(" ".." ")" => ExportList::Unqualified,
    "(" <Comma<ExportEntry>> ")" => ExportList::List(<>),
};

ExportEntry: ExportEntry = {
    NameTok => ExportEntry::Name(<>),
    "(" <OperatorTok> ")" => ExportEntry::Operator(<>),
    <NameTok> "(" ".." ")" => ExportEntry::WithAllConstructors(<>),
    <NameTok> "(" <Comma<NameTok>> ")" => ExportEntry::WithConstructors(<>),

};

pub Import: ElmImport = {
    <location:@L> "import" <global_name:NameTok>
    <local_name:("as" <NameTok>)?>
    <exposes:("exposing" <ExportList>)?> => ElmImport{ <> },
};

pub TopDeclr: TopDeclr = {
    "infixr" <priority:NumberTok> <operator:OperatorTok> =>
        TopDeclr::OperPriority(OperPriority {
            associativity: Associativity::Right,
            priority:
                u8::from_str(priority.as_str())
                    .expect("Error reading priority of infix operator"),
            operator : operator,
        }),

    "infixl" <priority:NumberTok> <operator:OperatorTok> =>
        TopDeclr::OperPriority(OperPriority {
            associativity: Associativity::Left,
            priority:
                // The lexer can potentially generate Number tokens that
                // are not convertible to u8, we "guard" against that
                // (this should be temporary untill I figure out a
                // better error handling system).
                u8::from_str(priority.as_str())
                    .expect("Error reading priority of infix operator"),
            operator : operator,
        }),

    <loc:@L>
    "type" <name:NameTok> <type_variables:NameTok*> "="
    <first_alt:(<NameTok> <EnclosedType*>)>
    <next_alts:("|"<NameTok> <EnclosedType*>)*> => {
        let mut alternatives : Vec<(String, Vec<Type>)> = next_alts;
        alternatives.insert(0,first_alt);
        TopDeclr::TypeDeclr(loc, TypeDeclr{name,type_variables,alternatives})
    },

    <loc:@L>
    "type" "alias" <name:NameTok> <type_variables:NameTok*> "=" <type_:Type> =>
        TopDeclr::TypeAlias(loc, TypeAlias{name, type_variables, type_}),

    <@L> "(" <OperatorTok> ")" <EnclosedPattern*> "=" <Expression> =>
        TopDeclr::OperatorDeclr(<>),

    <loc:@L> <p:"port"?> <name:NameTok> ":" <type_:Type> =>
        TopDeclr::FunctionAnnotation(loc, p.is_some(), name,  type_),

    "(" <OperatorTok> ")" ":" <Type> =>
        TopDeclr::OperatorAnnotation(<>),

    <@L> <NameTok> <EnclosedPattern*> "=" <Expression> =>
        TopDeclr::FunctionDeclr(<>),

    <DocCommentTok> => TopDeclr::DocComment(<>),
};

TokenList: tokens::ElmToken = {
    "(" => <>,
    ")" => <>,
    "," => <>,
    OperatorTok => tokens::ElmToken::Operator(<>),
    ".." => <>,
    NameTok => tokens::ElmToken::Name(<>),
    "module" => <>,
    "exposing" => <>,
    "import" => <>,
    "as" => <>,
    "{" => <>,
    "}" => <>,
    DocCommentTok => tokens::ElmToken::DocComment(<>),
    "[" => <>,
    "]" => <>,
    "lambda" => <>,
    "->" => <>,
    "case" => <>,
    "of" => <>,
    "_" => <>,
    "if" => <>,
    "then" => <>,
    "else" => <>,
    "|" => <>,
    "=" => <>,
    ":" => <>,
    "type" => <>,
    "alias" => <>,
    "infixr" => <>,
    "infixl" => <>,
    "port" => <>,
    "where" => <>,
    "let" => <>,
    "in" => <>,
    StringTok => tokens::ElmToken::StringLit(<>),
    NumberTok => tokens::ElmToken::Number(<>),
    CharTok => tokens::ElmToken::Char(<>),
    "let indent" => <>,
    "case indent" => <>,
    "endcase" => <>,
};

Type: Type = {
    <args:(<FunctionlessType> "->")+> <returns:FunctionlessType> => {
        let mut function_types = args;
        function_types.push(returns);
        Type::Function(function_types)
    },

    FunctionlessType => <>,
};

FunctionlessType: Type = {
    NameTok EnclosedType+ => Type::Application(<>),
    EnclosedType => <>,
};

EnclosedType: Type = {
    <name:NameTok> =>
        if name.chars().nth(0).map(|x| x.is_lowercase()) == Some(true) {
            Type::Variable(name)
        } else {
            Type::Terminal(name)
        },

    "(" <entries:(<Type> ",")+> <last:Type> ")" => {
        let mut entries = entries;
        entries.push(last);
        Type::Tuple(entries)
    },

    "{" <variable_over:(<NameTok> "|")?>
    <fields:Comma<(<NameTok> ":" <Type>)>> "}" => {
        Type::Record(tree::Record { variable_over, fields })
    },

    "{" "}" => Type::EmptyRecord,
    "(" ")" => Type::UnitType,
    "(" <Type> ")" => <>,
};

Pattern: Pattern = {
    <entries:(<AppliPattern> OperatorTok)+> <last:AppliPattern> => {
        let mut entries = entries;
        entries.push(last);
        Pattern::Decons(entries)
    },

    AppliPattern => <>,
};

AppliPattern: Pattern = {
    <name:NameTok> <arguments:EnclosedPattern+> => {
        if name.chars().nth(0).map(|x| x.is_uppercase()) == Some(true) {
            Pattern::ArgConstructor(name, arguments)
        } else {
            panic!("A bind located at the place of constructor")
        }
    },

    EnclosedPattern => <>,
};

EnclosedPattern: Pattern = {
    "{" <Comma<NameTok>> "}" => // TODO: bind only to lowercase
        Pattern::Record(<>),

    "(" <p:Pattern> "as" <name:NameTok> ")" =>
        Pattern::AliasBind(name, Box::new(p)),

    "(" <entries:(<Pattern> ",")+> <last:Pattern> ")" => {
        let mut entries = entries;
        entries.push(last);
        Pattern::Tuple(entries)
    },

    <name:NameTok> =>
        if name.chars().nth(0).map(|x| x.is_lowercase()) == Some(true) {
            Pattern::Bind(name)
        } else {
            Pattern::Constructor(name)
        },

    "(" <Pattern> ")" => <>,
    "(" ")" => Pattern::UnitType,
    StringTok => Pattern::StringLit(<>),
    NumberTok => Pattern::Number(<>),
    CharTok => Pattern::Character(<>),
    "_" => Pattern::Discard,
    "[" "]" => Pattern::EmptyList,
    "[" <Comma<Pattern>> "]" => Pattern::List(<>),

};

Expression: Expression = {
    <prefixes:(<ApplicationExpression> <OperatorTok>)+>
    <trailing:OpenExpression> =>
        Expression::InfixApplication{prefixes, trailing:Box::new(trailing)},

    OpenExpression => <>,
};

EsacExpression: Expression = {
    <prefixes:(<ApplicationExpression> <OperatorTok>)+>
    <trailing:EsacOpenExpression> =>
        Expression::InfixApplication{prefixes, trailing:Box::new(trailing)},

    EsacOpenExpression => <>,
};

EsacOpenExpression: Expression = {
    "case" <condition:Expression> "of"
    <init:(<@L> <Pattern> "->" <EsacExpression> "case indent")*>
    <last:(<@L> <Pattern> "->" <EsacExpression>)> "endcase" => {
        let mut branches = init;
        branches.push(last);
        Expression::CaseOf{condition:Box::new(condition), branches}
    },

    "lambda" <location:@L> <arguments:EnclosedPattern+> "->"
    <body:EsacExpression>  =>
        Expression::Lambda{location, arguments, body:Box::new(body)},

    "if" <ife:Expression>
    "then" <thene:Expression>
    "else" <elsee:EsacExpression> =>
        Expression::IfThenElse(
            Box::new(ife),
            Box::new(thene),
            Box::new(elsee)
        ),

    "let" <init:(<LetDeclaration> "let indent")*> <last:LetDeclaration>
    "in" <in_expr:EsacExpression> => {
        let mut declarations = init;
        declarations.push(last);
        Expression::LetIn(declarations, Box::new(in_expr))
    },

    ApplicationExpression => <>,
};

OpenExpression: Expression = {
    "case" <condition:Expression> "of"
    <init:(<@L> <Pattern> "->" <EsacExpression> "case indent")*>
    <last:(<@L> <Pattern> "->" <EsacExpression>)> => {
        let mut branches = init;
        branches.push(last);
        Expression::CaseOf{condition:Box::new(condition), branches}
    },

    "lambda" <location:@L> <arguments:EnclosedPattern+> "->"
    <body:Expression>  =>
        Expression::Lambda{location, arguments, body:Box::new(body)},

    "if" <ife:Expression>
    "then" <thene:Expression>
    "else" <elsee:Expression> =>
        Expression::IfThenElse(
            Box::from(ife),
            Box::from(thene),
            Box::from(elsee)
        ),

    "let" <init:(<LetDeclaration> "let indent")*> <last:LetDeclaration>
    "in" <in_expr:Expression> => {
        let mut declarations = init;
        declarations.push(last);
        Expression::LetIn(declarations, Box::from(in_expr))
    },

    ApplicationExpression => <>,
};

ApplicationExpression: Expression = {
    <head:ClosedExpression> <tail:ClosedExpression+> => {
        let mut expressions = tail;
        expressions.insert(0,head);
        Expression::Application(expressions)
    },

    ClosedExpression => <>,
};

ClosedExpression: Expression = {
    "{" <(<NameTok> "|")?> <Comma<(<NameTok> "=" <Expression>)>> "}" =>
        Expression::Record(<>),

    "[" <Comma<Expression>> "]" =>
        Expression::List(<>),

    "(" <entries:(<Expression> ",")+> <last:Expression> ")" => {
        let mut entries = entries;
        entries.push(last);
        Expression::Tuple(entries)
    },

    "(" <commas:","+> ")" =>
        Expression::TupleConstructor((commas.len() + 1) as i16),

    "{" "}" => Expression::EmptyRecord,
    "[" "]" => Expression::EmptyList,
    "(" ")" => Expression::UnitType,
    "(" <Expression> ")" => <>,
    StringTok => Expression::StringLit(<>),
    NumberTok => Expression::Number(<>),
    CharTok => Expression::Character(<>),
    "(" <OperatorTok> ")" => Expression::PrefixOperator(<>),
    NameTok => Expression::Variable(<>),
};

LetDeclaration: LetDeclaration = {
    <annotation:(<NameTok> ":" <Type> "let indent")?>
    <location:@L> <name:NameTok> <arguments:EnclosedPattern+> "="
    <body:Expression> => {
        match annotation {
            Some((annot_name, maybe_annotation)) => {
                if annot_name != name {
                    panic!("Type annotation name in let expression doesn't \
                           match the function declaration it is annotating")
                }
                let annotation = Some(maybe_annotation);
                LetDeclaration{
                    name: Some(name),
                    annotation, arguments, body, location
                }
            },
            None =>
                LetDeclaration{
                    name: Some(name),
                    annotation: None,
                    arguments, body, location
                },
        }
    },

    <annotation:(NameTok ":" <Type> "let indent")?>
    <location:@L> <pattern:EnclosedPattern> "=" <body:Expression> =>
        LetDeclaration{
            name: None,
            arguments: vec![pattern],
            annotation, body, location,
        },
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

extern {
    type Location = u32;
    type Error = tokens::LexError;

    enum tokens::ElmToken {
        "(" => tokens::ElmToken::LParens,
        ")" => tokens::ElmToken::RParens,
        "," => tokens::ElmToken::Comma,
        OperatorTok => tokens::ElmToken::Operator(<String>),
        ".." => tokens::ElmToken::Ellision,
        NameTok => tokens::ElmToken::Name(<String>),
        "module" => tokens::ElmToken::Module,
        "exposing" => tokens::ElmToken::Exposing,
        "import" => tokens::ElmToken::Import,
        "as" => tokens::ElmToken::As,
        "{" => tokens::ElmToken::LBrace,
        "}" => tokens::ElmToken::RBrace,
        DocCommentTok => tokens::ElmToken::DocComment(<String>),
        "[" => tokens::ElmToken::LBracket,
        "]" => tokens::ElmToken::RBracket,
        "lambda" => tokens::ElmToken::Lambda,
        "->" => tokens::ElmToken::RArrow,
        "case" => tokens::ElmToken::Case,
        "of" => tokens::ElmToken::Of,
        "_" => tokens::ElmToken::Underscore,
        "if" => tokens::ElmToken::If,
        "then" => tokens::ElmToken::Then,
        "else" => tokens::ElmToken::Else,
        "|" => tokens::ElmToken::Pipe,
        "=" => tokens::ElmToken::Assign,
        ":" => tokens::ElmToken::Colon,
        "type" => tokens::ElmToken::Type,
        "alias" => tokens::ElmToken::Alias,
        "infixr" => tokens::ElmToken::Infixr,
        "infixl" => tokens::ElmToken::Infixl,
        "port" => tokens::ElmToken::Port,
        "where" => tokens::ElmToken::Where,
        "let" => tokens::ElmToken::Let,
        "in" => tokens::ElmToken::In,
        StringTok => tokens::ElmToken::StringLit(<String>),
        NumberTok => tokens::ElmToken::Number(<String>),
        CharTok => tokens::ElmToken::Char(<String>),
        "case indent" => tokens::ElmToken::CaseIndent,
        "let indent" => tokens::ElmToken::LetIndent,
        "endcase" => tokens::ElmToken::Endcase,
    }
}

// vim: ft=rust
